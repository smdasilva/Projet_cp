= Conventions de codage à respecter *impérativement* =

== Langue ==

La langue du code doit impérativement être l'Anglais. Les variables, les objets, les classes et les méthodes sont nommés en Anglais.

Les commentaires doivent être écrit de préférence en Anglais.
Néanmoins, le Français sera toléré (il vaut mieux écrire un truc
compréhensible en Français qu'un truc qui ne veut rien dire en Anglais).


== Forme du code ==

  === Indentation ===

L'indentation doit être effectuée en utilisant les paramètres par défaut d'Eclipse
(en principe, une tabulation -> 4 espaces). 

  === Opérateur ===

Les opérations utilisant des opérateurs doivent être espacées.
Exemple : toto = tata + titi; et non pas toto=tata+titi;

  === Blocs ===

Les blocs se présentent de la forme suivante (exemple avec un if) :

if (toto == tata) {
    tutu();
}

*Aucune* autre forme de présentation n'est acceptée !

NOTE : Les blocs if, for… contenant une seule instruction doivent *quand même* 
posséder des accolades ! Ceci permet d'ajouter plus simplement des instructions 
si nécessaire, et le code n'en est que plus lisible.

Notez la position de l'accolade ouvrante et évitez la version moins compacte avec
retour à la ligne !

  === Instructions ternaires ===

Les instructions ternaires sont autorisées. En cas d'écriture complexe (plusieurs instructions imbriquées), un commentaire peut-être laissé en fin de ligne.

Exemple : toto = (tata == 0)?1:10; // Si tata == 0, toto = 1, sinon, toto = 10, mais ce commentaire n'est vraiment pas utile.



== Contenu du code ==

  === Classes / Méthodes ===

Afin de respecter les principes d'encapsulation, les classes d'un package doivent être default (et non public)
au maximum pour en limiter la visibilité à l'extérieur. Mettez les classes que vous désirez utiliser à
travers des import en public, sinon vous aurez des problèmes de compilation.

  === Magic Numbers ===

Les "magic numbers" sont à éviter. 
Par exemple : if (toto == 4) { }
D'où sort ce '4' ? C'est un "magic number". Il vaudra donc mieux le remplacer par une constante
globale, voire par un private static final, pour savoir à quoi il correspond 
Exemple plus lisible :
private static final int MAX_THREADS 4
if (toto == MAX_THREADS) { } 

NOTE : Il peut bien sûr y avoir des exceptions.

  === Mot clé "final" et compagnie ===

* Si un attribut de classe est constant, il *doit* être déclaré "static final".
* Si un attribut d'instance est constant, il *doit* être déclaré "final".
* Si un argument d'une méthode n'est pas modifié dans la méthode, il *doit* être déclaré "final" (ex : methode(final int i)). La référence à l'objet est ainsi protégée.
* Si une méthode ne doit pas être modifiée par une sous-classe, elle *doit* être déclarée "final".
* Si une classe ne doit pas être héritée, elle *doit* être déclarée "final".


  == Nomage ==

Les noms sont tous donnés en anglais, donc la phrase qui suit ne devrait pas être précisée, mais on ne sait jamais… 
*Jamais*, sous *aucun* prétexte, d'accent dans le code !

Les variables, objets, classes, fonctions, méthodes… sont nommées de la manière suivante :

* ClassName
* methodName
* objectName ou objectname (suivant le cas, par exemple, filename est plus joli que fileName).
* CONSTANT_NAME
* setAttribute
* getAttribute
* isAttributed (si l'attribut "enable" est un booléen, isEnabled())
* buttonNameButton (le QButton toto sera nommé totoButton, exemple à suivre pour les autres objets d'interface).

  === Qt auto-connect (pour bien comprendre comment fonctionne l'UI C++) ===

En Qt, les signaux et les slots peuvent être automatiquement connectés à condition de respecter une certaine convention de nomage. Cette propriété très intéressante est activée par défaut dans les fenêtres créées avec QtDesigner.

Les slots doivent être nommés :

void on_object_signal(args)

Par exemple, le bouton "totoButton" peut emettre le signal "clicked()" (quand il est cliqué). Dans ce cas, si vous voulez créer un signal quand le bouton est cliqué, le signal devra être nommé :

void on_totoButton_clicked();

Evidemment c'est un raccourcis, et en vrai d'autres méthodes sont générées pour envoyer un signal, et pour recevoir un signal et le traiter.

  == Fichiers ==

Les fichiers sont nommés en minuscules, sans espace ni underscore.

La classe ClassName sera donc contenue dans le fichier classname.java

Seuls les fichiers générés peuvent contenir un underscore (ui_mainwindow.xml, par exemple), mais les fichiers générés ne font pas partie du code source. 



== Commentaires ==

Il y a deux types de commentaires.

  === Doxygen ===

Vous verrez apparaître dans les sources C++ des commentaires spéciaux type javadoc interprétés à l'aide de Doxygen.
Il faudra les reporter dans nos sources Java. 

  === Gotcha Keywords (nécessaire en C++, remplaçable par de la javadoc en Java.) ===

Le code doit, à chaque fois que c'est nécessaire, contenir des Gotcha Keywords. Ces commentaires sont de la forme :

// :KEYWORD:pseudo:date: commentaire
// Suite du commentaire, si nécessaire

KEYWORD peut être un mot clé dans la liste suivante : DOC, TRICKY, COMMENT, TODO, KLUDGE, WARNING, DEBUG, BUG, DEBUG

date *doit impérativement* être écrite de la forme YYMMDD.

Par exemple, pour le 31 février 2012, la date sera 120231 (oui oui… le 31 février :D)

Exemple de gotcha : // :BUG:cbadiola:120927: We must limit the zoom. If we zoom or unzoom too much, the app crashes.

